name: >-
  ecs-dev_env_85905f39-a02f-4772-a5ac-d424b2ef2862_app_ffbb2c7d-87dc-4b73-9d84-7cc34d5cff71
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - deploy-to-ecs
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_144a9263-6cb4-4dc0-9f6d-793676318836
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.NODEJSAPP_ENV_85905F39A02F4772A5ACD424B2EF2862_APP_FFBB2C7D87DC4B739D847CC34D5CFF71_ECSDEV_ENV_85905F39A02F4772A5ACD424B2EF2862_APP_FFBB2C7D87DC4B739D847CC34D5CFF71}}
  REPOSITORY_NAME: pipeline-service-ecs-deployment-role
jobs:
  build-and-push:
    name: Build And Push
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets 1f317c7f-c4a2-4e52-bddd-5f24b134f4be'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials 4b5a87af-454d-4866-865e-9ee53d8629d7'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Login to Amazon ECR'
        id: skyu-login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: 'Run :: Check if image already exists'
        id: check-image-existence-step-id
        run: |2-

              if docker pull ${{ env.IMAGE_NAME }}:${{env.IMAGE_TAG}} >/dev/null 2>&1; 
              then
                echo "Image exists in registry."
                echo "STEPS_CAN_PROCEED=false" >> $GITHUB_ENV
              else
                echo "Image does not exist in registry."
                echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              fi
              
      - name: 'Run :: Create Repository'
        run: >-
          aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
          || true
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Build, tag, and push image'
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
